; Copyright (C) 2015 The University of Notre Dame
; This software is distributed under the GNU General Public License.
; See the file LICENSE for details.
;
; This is the raw bootblock code, a 512-byte chunk of assembly
; found on the first sector of the boot disk.  The BIOS is responsible
; for starting the machine, loading this sector into memory,
; and then transferring control here.  The bootblock must call
; to the BIOS to load the remaining sectors containing the
; kernel code, and then jump there.
;
; Constants describing our basic memory layout are in this
; header file, which is shared between C and assembly modules:
; 
; When we receive control from the BIOS, the following are set:
; %dl - the device number this block was loaded from
; %es:%si - the partition table entry we were loaded from
;
; To set the code segment appropriately, the first thing we
; do is a long jump to start, which sets cs=BOOTBLOCK_SEGMENT
bits 16
segment .text
  jmp 0x7c0:start
; Now we begin setting up the execution environment
; for loading the rest of the kernel.
start:
  sti                         ; disable interrupts
  cld                         ; clear the direction flag
  mov ax, cs                  ; set all segments to code
  mov ds, ax
  mov es, ax
  mov ax, 0x0                 ; set up the stack
  mov ss, ax
  mov sp, 0xfff0
  mov [disk_number], dl       ; save the disk number
  mov di, [partition_status]  ; set the partition table as dest
  mov cx, 0xc                 ; copy 12 bytes from si to di
  rep movsb
  mov si, loadmsg             ; print initial message
  call bios_putstring
  mov ah, 0x0                 ; reset the disk system
  int 0x13
  mov ah, 0x8                 ; get the drive geometry
  int 0x13
  and cl, 0x3f                ; mask off high tracks
  mov [disk_sectors], cl
  mov [disk_cylinders], ch
  mov [disk_heads], dh
  mov ax, 0x1000              ; load happens at es:bx
  mov es, ax                  ; which we set to
  mov bx, 0x0                 ; KERNEL_SEGMENT:KERNEL_OFFSET
  ; disk parameters:
  mov dl, [disk_number]       ; device
  mov ch, 0x0                 ; cylinder 0
  mov dh, 0x0                 ; head 0
  mov cl, 0x2                 ; sector 2
loadsector:
  mov al, 0x1                 ; load 1 sector
  mov ah, 0x2                 ; load command
  int 0x13                    ; execute load
  mov al, '.'                 ; display a dot
  call bios_putchar           ; for each sector loaded
  mov ax, [sectors_left]      ; how many sectors left?
  cmp ax, 0xffff              ; has it been initialized?
  jne gotsectors              ; yes - use the value
  mov eax, [es:0x14]          ; no - get size of kernel
  shr eax, byte 0x9           ; convert into blocks
  inc eax                     ; add one for good measure
gotsectors:
  dec ax                      ; remove one block
  mov [sectors_left], ax      ; store the value
  cmp ax, byte +0x0           ; are we done?
  je loaddone                 ; yes - jump to bottom
checksegment:
  add bx, 0x200               ; move data pointer by 512 bytes
  cmp bx, byte +0x0           ; did we reach segment end?
  jnz nextsector              ; no - find next sector
  mov ax, es                  ; yes - retrieve seg register
  add ax, 0x1000              ; move to next 64k block
  mov es, ax                  ; store segment register
nextsector:
  inc cl                      ; advance by one sector
  mov al, [disk_sectors]      ; what is the maximum sector?
  cmp cl, al                  ; is this the last sector?
  jle loadsector              ; no - load the next sector
  mov cl, 0x1                 ; yes - go to sector zero..
  inc dh                      ; advance to next head
  mov al, [disk_heads]        ; what is the maximum head?
  cmp dh, al                  ; is this the last head?
  jle loadsector              ; no - read the next sector
  mov dh, 0x0                 ; yes - go to head zero
  inc ch                      ; advance to next cylinder
  mov al, [disk_cylinders]    ; what is the maximum cylinder?
  cmp ch, al                  ; is this the last cylinder?
  jle loadsector              ; no - read the next sector
loaddone:                     ; yes - fall through here
  mov ah, 0x0                 ; reset the disk system
  int 0x13
  mov si, bootmsg             ; print boot message
  call bios_putstring
  mov ax, 0x1000              ; jump to the kernel code
  mov ds, ax
  jmp 0x1000:0x0
bios_putstring:               ; routine to print an entire string
  mov al, [si]
  cmp al, 0x0
  jz bios_putstring_done
  call bios_putchar
  inc si
  jmp bios_putstring
bios_putstring_done:
  ret
  bios_putchar:
  push ax
  push bx
  mov ah, 0xe
  mov bl, 0x1
  int 0x10
  pop bx
  pop ax
  ret
loadmsg: db 'bootblock: loading kernel...', 0xd, 0xa, 0
bootmsg: db 0xd, 0xa, 'bootblock: booting kernel...', 0xd, 0xa, 0
disk_number: db 0
disk_cylinders: db 0
disk_heads: db 0
disk_sectors: db 0
sectors_left: dw 0xffff
partition_status: db 0
partition_start_chs: db 0, 0, 0
partition_type: db 0
partition_stop_chs: db 0, 0, 0
partition_start_lba: dd 0
partition_length: dd 0

; A bootblock must have 0xaa55 in its two final bytes.
; The .org directive forces this data to that point.
times 510 - $ + $$ db 0
dw 0xaa55
