; Copyright (C) 2015 The University of Notre Dame
; This software is distributed under the GNU General Public License.
; See the file LICENSE for details.
;
;
; _start is the initial entry point for the kernel
; Note that we start here merely because it comes
; first in the link order.  The name _start is there
; merely to keep the linker happy.

%define INTERRUPT_STACK_TOP 0xfff0
%define KERNEL_SIZE_OFFSET 20

extern kernel_main
extern interrupt_handler
extern syscall_handler
extern _end

bits 16
segment .text

global _start
_start:
; First, jump to the real code start,
; skipping over the immediate data that follows
  jmp realstart

; At a fixed offset, place an integer that contains
; the length of the kernel in bytes.  This is used
; by the bootblock code to figure out how many sectors to load.
times KERNEL_SIZE_OFFSET - $ + $$ db 0
global kernel_size
kernel_size:
  dd _end - _start

realstart:

; While we are briefly still in 16-bit real mode,
; it is safe to call the BIOS to set things up.

; Reset the disk system in order to quiet motors
; and turn off any pending interrupts.

  mov ah, 0
  int 0x13

; Turn off the screen cursor, because the
; console will have its own.

  mov ah, 1
  mov cl, 0
  mov ch, 0x20
  int 0x10

; Get the amount of memory above 1MB and save it for later.
; There are two ways to do this:

; BIOS call 0xe801 measures memory as follows:	
; %ax returns memory above 1MB in 1KB increments, maximum of 16MB.
; %bx returns memory above 64MB in 64KB increments, maximum of 4GB.
; However, this call is relatively new, so if it
; fails, we fall back on memtest2 below.

memtest1:
  clc
  mov bx, 0
  mov ax, 0xe801
  int 0x15
  jc memtest2

  shr ax, 10
  shr bx, 4
  add bx, ax
  mov [total_memory-_start], bx
  jmp memdone

; BIOS call 0x0088 measures memory as follows:
; %ax returns memory above 1MB in 1KB increments, maxiumum of 64MB.

memtest2:
  clc
  mov ax, 0
  mov ah, 0x88
  int 0x15
  shr ax, 10
  inc ax
  mov [total_memory-_start], ax
memdone:

; Now, set the video mode using VBE interrupts.
; Keep trying until we find one that works.
;
; These are documented on page 30 of the VESA-BIOS manual:
; interrupt 0x10
; ax = 0x4f02 "Set VBE Mode"
; bx = mode
;    D0-8   = Mode Number
;    D9-10  = Reserved (must be 0)
;    D11    = 0 Use current default refresh rate.
;    D12-13 = 0 Reserved
;    D14    = 0 Use windowed frame buffer model.
;           = 1 Use linear frame buffer model.
;    D15    = 0 Clear display memory.
;    ES:DI  = Pointer to CRCTCInfoBlock structure.

%macro setres 1
  mov ax, 0x4f02
  mov bx, word %1
  int 0x10
  cmp ax, 0x004f
  je videodone
%endmacro

jmp video800
video1280: setres 0x411b
video1024: setres 0x4118
video800: setres 0x4115
video640: setres 0x4112
video640_lowcolor: setres 0x4111
videofailed:
  mov esi, videomsg
  call bios_putstring
  jmp halt
videodone:

; After all that, query the video mode and
; figure out the dimensions and the frame
; buffer address.  The set mode is still in bx.

  mov ax, ds  ; Set up the extra segment
  mov es, ax  ; with the data segment

  mov di, video_info - _start
  mov ax, 0x4f01
  mov cx, bx
  int 0x10

; In order to use video resolutions higher than 640x480,
; we must enable the A20 address line. The following
; code works on motherboards with "FAST A20", which should
; be everything since the IBM PS/2
  in al, 0x92
  or al, 2
  out 0x92, al

; Finally, we are ready to enter protected mode.
; To do this, we disable interrupts so that
; handlers will not see an inconsistent state.
; We then load the new interrupt and descriptor
; tables, which are given below.  Then, we
; enable the protection bit, and load the
; segment selectors into the appropriate registers.
; Finally, we make a long jump to main,
; atomically loading the new code segment and
; starting the kernel.

  cli                           ; clear interrupts
  lidt [idt_init-_start]        ; load the interrupt table
  lgdt [gdt_init-_start]        ; load the descriptor table
  mov eax, cr0                  ; get the status word
  or eax, 0x01                  ; turn on the P bit
  mov cr0, eax                  ; store the status word
                                ; (we are now in protected mode)
  mov ax, 2*8                   ; selector two is flat 4GB data data
  mov ds, ax                    ; set stack and data segments to selector two
  mov ss, ax
  mov ax, 5*8                   ; set TSS to selector five
  ltr ax
  mov ax, 0                     ; unused segments are nulled out
  mov es, ax
  mov fs, ax
  mov gs, ax
  mov sp, INTERRUPT_STACK_TOP   ; set up initial C stack
  mov bp, INTERRUPT_STACK_TOP   ; set up initial C stack
  jmp  1*8: dword kernel_main   ; jump to the C main!

; bios_putstring displays an ASCII string pointed to by %si,
; useful for basic startup messages or fatal errors.
bios_putstring:
  mov al, [si]
  cmp al, 0
  jz bios_putstring_done
  call bios_putchar
  inc si
  jmp bios_putstring
bios_putstring_done:
  ret

; bios_putchar invokes the bios to display
; one character on the screen.
bios_putchar:
  push ax
  push bx
  mov ah, 14
  mov bl, 1
  int 0x10
  pop bx
  pop ax
  ret

; The video_info structure is filled in by a BIOS
; call above, and is used to record the basic video
; layout for the graphics subsystem.  See page 30
; of the VBE specification for an explanation of this structure.
align 4
video_info:
  dw 0
  db 0, 0
  dw 0, 0, 0, 0
  dd 0
global video_xbytes
video_xbytes:
  dw 0
global video_xres
video_xres:
  dw 0
global video_yres
video_yres:
  dw 0
  db 0, 0, 0, 0, 0, 0, 0, 0, 0
  db 0, 0, 0, 0, 0, 0, 0, 0, 0
global video_buffer
video_buffer:
  dd 0
  dd 0
  dw 0
  dw 0
  db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  dd 0
times 190 db 0

align 4
videomsg:
  db "fatal error: couldn't find suitable video mode!", 0xd, 0xa, 0


;###########################
;# 32 BIT CODE BEGINS HERE #
;###########################
; All code below this point is 32-bit code and data
; that is invoked by higher levels of the kernel from C code.
; Rebooting the machine is easy.
; Set up an invalid interrupt table, and the force an interrupt.
; The machine will triple-fault and reboot itself.

bits 32
global reboot
reboot:
  cli
  lidt [idt_invalid]
  int 1

global halt
halt:
  cli
  hlt
  jmp halt

; This is the global descriptor table to be used by the kernel.
; Because we don't really want to use segmentation, we define
; very simple descriptors for global code and data and the TSS
align 16
global gdt
gdt:
  dw 0, 0, 0, 0                           ; seg 0 - null
  dw 0xffff, 0x0000, 0x9a00, 0x00cf       ; seg 1 - kernel flat 4GB code
  dw 0xffff, 0x0000, 0x9200, 0x00cf       ; seg 2 - kernel flat 4GB data
  dw 0xffff, 0x0000, 0xfa00, 0x00cf       ; seg 3 - user flat 4GB code
  dw 0xffff, 0x0000, 0xf200, 0x00cf       ; seg 4 - user flat 4GB data
  dw 0x0068, (tss-_start), 0x8901, 0x00cf ; seg 5 - TSS

; This is the initializer for the global descriptor table.
; It simply tells us the size and location of the table.
gdt_init:
  dw gdt_init-gdt
  dd gdt

; The TSS is a big task management structure used by the 386.
; We do not use the TSS, but simply rely on pushing variables
; around in stacks.  However, we need to use the TSS in order
; to initialize the stack pointer and segment for priv level 0
align 16
global tss
tss:
  dd 0
global interrupt_stack_pointer
interrupt_stack_pointer:
  dd INTERRUPT_STACK_TOP  ; initial interrupt stack ptr at 64 KB
  dd 2*8                  ; use segment 2 for the interrupt stack
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0
  dd 0

global total_memory
total_memory:
  dw 32
; Purpose : Give the possibility to write multiple instructions in single line.|
;===============================================================================.
; %0 = number of parameters received
; %1 = 1st parameter received
%macro _ 1-*
%rep (%0)   ; Reapet %0 times
  %1
  %rotate  1; Rotate element right to left for scanning all element parsing in macro.
%endrep
%endmacro
; First, the internal interrupts.
; Note that some already push their own detail
; code onto the stack.  For the others, we push
; a zero, just to get a common layout.

intr00: _{push 0}, {push  0}, {jmp intr_handler}
intr01: _{push 0}, {push  1}, {jmp intr_handler}
intr02: _{push 0}, {push  2}, {jmp intr_handler}
intr03: _{push 0}, {push  3}, {jmp intr_handler}
intr04: _{push 0}, {push  4}, {jmp intr_handler}
intr05: _{push 0}, {push  5}, {jmp intr_handler}
intr06: _{push 0}, {push  6}, {jmp intr_handler}
intr07: _{push 0}, {push  7}, {jmp intr_handler}
intr08: _{      }, {push  8}, {jmp intr_handler}
intr09: _{push 0}, {push  9}, {jmp intr_handler}
intr10: _{      }, {push 10}, {jmp intr_handler}
intr11: _{      }, {push 11}, {jmp intr_handler}
intr12: _{      }, {push 12}, {jmp intr_handler}
intr13: _{      }, {push 13}, {jmp intr_handler}
intr14: _{      }, {push 14}, {jmp intr_handler}
intr15: _{push 0}, {push 15}, {jmp intr_handler}
intr16: _{push 0}, {push 16}, {jmp intr_handler}
intr17: _{      }, {push 17}, {jmp intr_handler}
intr18: _{push 0}, {push 18}, {jmp intr_handler}
intr19: _{push 0}, {push 19}, {jmp intr_handler}

; These interrupts are reserved, but could
; conceivably occur on the next processor model

intr20: _{push 0}, {push 20}, {jmp intr_handler}
intr21: _{push 0}, {push 21}, {jmp intr_handler}
intr22: _{push 0}, {push 22}, {jmp intr_handler}
intr23: _{push 0}, {push 23}, {jmp intr_handler}
intr24: _{push 0}, {push 24}, {jmp intr_handler}
intr25: _{push 0}, {push 25}, {jmp intr_handler}
intr26: _{push 0}, {push 26}, {jmp intr_handler}
intr27: _{push 0}, {push 27}, {jmp intr_handler}
intr28: _{push 0}, {push 28}, {jmp intr_handler}
intr29: _{push 0}, {push 29}, {jmp intr_handler}
intr30: _{push 0}, {push 30}, {jmp intr_handler}
intr31: _{push 0}, {push 31}, {jmp intr_handler}

; Now, the external hardware interrupts.

intr32: _{push 0}, {push 32}, {jmp intr_handler}
intr33: _{push 0}, {push 33}, {jmp intr_handler}
intr34: _{push 0}, {push 34}, {jmp intr_handler}
intr35: _{push 0}, {push 35}, {jmp intr_handler}
intr36: _{push 0}, {push 36}, {jmp intr_handler}
intr37: _{push 0}, {push 37}, {jmp intr_handler}
intr38: _{push 0}, {push 38}, {jmp intr_handler}
intr39: _{push 0}, {push 39}, {jmp intr_handler}
intr40: _{push 0}, {push 40}, {jmp intr_handler}
intr41: _{push 0}, {push 41}, {jmp intr_handler}
intr42: _{push 0}, {push 42}, {jmp intr_handler}
intr43: _{push 0}, {push 43}, {jmp intr_handler}
intr44: _{push 0}, {push 44}, {jmp intr_handler}
intr45: _{push 0}, {push 45}, {jmp intr_handler}
intr46: _{push 0}, {push 46}, {jmp intr_handler}
intr47: _{push 0}, {push 47}, {jmp intr_handler}
intr48: _{push 0}, {push 48}, {jmp intr_syscall}

intr_handler:
  push ds
  push ebp ; push regs
  push edi
  push esi
  push edx
  push ecx
  push ebx
  push eax
  push dword [esp+36]     ; push interrupt code
  push dword [esp+36]     ; push interrupt number
  mov eax, 2*8      ; switch to kernel data seg
  mov ds, eax
  call interrupt_handler
  add esp, 4        ; remove interrupt number
  add esp, 4        ; remove interrupt code
  jmp intr_return

intr_syscall:
  push ds
  push ebp ; push regs
  push edi
  push esi
  push edx
  push ecx
  push ebx
  push eax      ; note these *are* the syscall args
  mov eax, 2*8  ; switch to kernel data seg
  mov ds, eax
  call syscall_handler
  add esp, 4    ; remove the old eax
  jmp syscall_return

global intr_return
intr_return:
  pop eax
syscall_return:
  pop ebx
  pop ecx
  pop edx
  pop esi
  pop edi
  pop ebp
  pop ds
  add esp, 4    ; remove interrupt num
  add esp, 4    ; remove detail code
  iret          ; iret gets the intr context

align 2
idt:
  dw intr00-_start, 1*8, 0x8e00, 0x0001
  dw intr01-_start, 1*8, 0x8e00, 0x0001
  dw intr02-_start, 1*8, 0x8e00, 0x0001
  dw intr03-_start, 1*8, 0x8e00, 0x0001
  dw intr04-_start, 1*8, 0x8e00, 0x0001
  dw intr05-_start, 1*8, 0x8e00, 0x0001
  dw intr06-_start, 1*8, 0x8e00, 0x0001
  dw intr07-_start, 1*8, 0x8e00, 0x0001
  dw intr08-_start, 1*8, 0x8e00, 0x0001
  dw intr09-_start, 1*8, 0x8e00, 0x0001
  dw intr10-_start, 1*8, 0x8e00, 0x0001
  dw intr11-_start, 1*8, 0x8e00, 0x0001
  dw intr12-_start, 1*8, 0x8e00, 0x0001
  dw intr13-_start, 1*8, 0x8e00, 0x0001
  dw intr14-_start, 1*8, 0x8e00, 0x0001
  dw intr15-_start, 1*8, 0x8e00, 0x0001
  dw intr16-_start, 1*8, 0x8e00, 0x0001
  dw intr17-_start, 1*8, 0x8e00, 0x0001
  dw intr18-_start, 1*8, 0x8e00, 0x0001
  dw intr19-_start, 1*8, 0x8e00, 0x0001
  dw intr20-_start, 1*8, 0x8e00, 0x0001
  dw intr21-_start, 1*8, 0x8e00, 0x0001
  dw intr22-_start, 1*8, 0x8e00, 0x0001
  dw intr23-_start, 1*8, 0x8e00, 0x0001
  dw intr24-_start, 1*8, 0x8e00, 0x0001
  dw intr25-_start, 1*8, 0x8e00, 0x0001
  dw intr26-_start, 1*8, 0x8e00, 0x0001
  dw intr27-_start, 1*8, 0x8e00, 0x0001
  dw intr28-_start, 1*8, 0x8e00, 0x0001
  dw intr29-_start, 1*8, 0x8e00, 0x0001
  dw intr30-_start, 1*8, 0x8e00, 0x0001
  dw intr31-_start, 1*8, 0x8e00, 0x0001
  dw intr32-_start, 1*8, 0x8e00, 0x0001
  dw intr33-_start, 1*8, 0x8e00, 0x0001
  dw intr34-_start, 1*8, 0x8e00, 0x0001
  dw intr35-_start, 1*8, 0x8e00, 0x0001
  dw intr36-_start, 1*8, 0x8e00, 0x0001
  dw intr37-_start, 1*8, 0x8e00, 0x0001
  dw intr38-_start, 1*8, 0x8e00, 0x0001
  dw intr39-_start, 1*8, 0x8e00, 0x0001
  dw intr40-_start, 1*8, 0x8e00, 0x0001
  dw intr41-_start, 1*8, 0x8e00, 0x0001
  dw intr42-_start, 1*8, 0x8e00, 0x0001
  dw intr43-_start, 1*8, 0x8e00, 0x0001
  dw intr44-_start, 1*8, 0x8e00, 0x0001
  dw intr45-_start, 1*8, 0x8e00, 0x0001
  dw intr46-_start, 1*8, 0x8e00, 0x0001
  dw intr47-_start, 1*8, 0x8e00, 0x0001
  dw intr48-_start, 1*8, 0xee00, 0x0001

; This is the initializer for the global interrupt table.
; It simply gives the size and location of the interrupt table
idt_init:
  dw idt_init - idt
  dd idt

; This is the initializer for an invalid interrupt table.
; Its only purpose is to assist with the reboot routine.
idt_invalid:
  dw 0
  dd 0
